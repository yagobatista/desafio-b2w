{"version":3,"sources":["PlanetBox.js","AppDescription.js","App.js","serviceWorker.js","index.js"],"names":["PlaneBox","props","name","population","climate","terrain","films","Object","keys","length","className","AppDescription","hasPlanet","App","useState","data","setData","randomPlanet","setRandomPlanet","useEffect","a","async","results","result","next","axios","fetchData","PlanetBox","onClick","Math","floor","random","data-style","SLIDE_UP","loading","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRA6BeA,MA3Bf,SAAkBC,GAAQ,IAErBC,EAKED,EALFC,KACDC,EAIGF,EAJHE,WACAC,EAGGH,EAHHG,QACAC,EAEGJ,EAFHI,QACAC,EACGL,EADHK,MAEF,OACEC,OAAOC,KAAKP,GAAOQ,OACjB,6BAASC,UAAU,cACjB,gCACE,4BAAKR,IAEP,yBAAKQ,UAAU,mBACb,wBAAIA,UAAU,0BACZ,2CAAgB,8BAAOP,IACvB,wCAAa,8BAAOC,GAApB,KACA,wCAAa,8BAAOC,GAApB,KACA,2CAAiBC,GAASA,EAAMG,OAAhC,cAIJ,ICbOE,MAVf,SAAwBV,GAEtB,OADsBA,EAAdW,UAIJ,GADF,uBAAGF,UAAU,oBAAb,+I,yCCkDWG,MAhDf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAE2BF,qBAF3B,mBAENG,EAFM,KAEQC,EAFR,KAyBb,OApBAC,qBAAU,YACU,yBAAAC,EAAAC,OAAA,gDACZC,EAAU,GACVC,EAAS,CACXC,KAAM,iCAHQ,WAKTD,EAAOC,KALE,mCAAAJ,EAAA,MAMSK,IAAMF,EAAOC,OANtB,iBAMNT,EANM,EAMNA,OAENQ,EAASR,EACTO,EAAO,sBAAOA,GAAP,YAAmBC,EAAOD,UACjCN,EAAQM,IAERC,EAAS,GAZG,qDAgBlBG,KACC,IAGD,yBAAKhB,UAAU,OACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,kBAACiB,EAAcV,GACf,kBAAC,EAAD,CAAgBL,YAAaK,KAE/B,yBAAKP,UAAU,uBACb,kBAAC,IAAD,CACEA,UAAU,aACVkB,QAjCM,kBAAMV,EAAgBH,EAAKc,KAAKC,MAAMD,KAAKE,SAAWhB,EAAKN,WAkCjEuB,aAAYC,WACZC,SAAUnB,EAAKN,QACdQ,EAAe,OAAS,qBCnCnBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3b1c106e.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction PlaneBox(props) {\n  const {\n     name,\n    population,\n    climate,\n    terrain,\n    films,\n   } = props;\n  return (\n    Object.keys(props).length ? (\n      <article className=\"planet-box\">\n        <header>\n          <h2>{name}</h2>\n        </header>\n        <div className=\"planet-box-body\">\n          <ul className=\"planet-attributes-list\">\n            <li>Population: <span>{population}</span></li>\n            <li>Climate: <span>{climate}</span> </li>\n            <li>Terrain: <span>{terrain}</span> </li>\n            <li>Featured in {films && films.length} films </li>\n          </ul>\n        </div>\n      </article>\n    ) : ''\n  );\n}\n\nexport default PlaneBox;\n","import React from \"react\";\n\nfunction AppDescription(props) {\n  const { hasPlanet } = props;\n  return (\n    !hasPlanet ?\n    <p className=\"star-wars-layout\"> This app generates randomly planets from the star wars franchise, display how would be the climate, terrain and how many films it was in.</p>\n    : ''\n\n  );\n}\n\nexport default AppDescription;\n","import React, { useState, useEffect } from \"react\";\nimport PlanetBox from \"./PlanetBox\";\nimport AppDescription from \"./AppDescription\";\nimport \"./App.scss\";\nimport axios from \"axios\";\nimport LaddaButton, {SLIDE_UP} from 'react-ladda';\n\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [randomPlanet, setRandomPlanet] = useState();\n  const setPlanet = () => setRandomPlanet(data[Math.floor(Math.random() * data.length)]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      let results = [];\n      let result = {\n        next: \"https://swapi.co/api/planets/\"\n      };\n      while (result.next) {\n        const { data } = await axios(result.next);\n        if (data) {\n          result = data;\n          results = [...results, ...result.results];\n          setData(results);\n        } else {\n          result = [];\n        }\n      }\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"row mod-full\">\n        <div className=\"col\">\n          <div className=\"row\">\n            <PlanetBox {...randomPlanet}></PlanetBox>\n            <AppDescription hasPlanet={!!randomPlanet}></AppDescription>\n          </div>\n          <div className=\"row buttonContainer\">\n            <LaddaButton\n              className=\"nextButton\"\n              onClick={setPlanet}\n              data-style={SLIDE_UP}\n              loading={!data.length}>\n              {randomPlanet ? \"Next\" : \"First planet\"}\n            </LaddaButton>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}